import java.util.HashMap;
import java.util.Scanner;
public class BattleTower {
	protected static int towerLevel;
	protected static int recordTowerLevel=1;
	protected static HashMap<Integer, Pokemon> player;
	protected static HashMap<Integer, Pokemon> enemy;
	protected static float enemyFullHp;
	protected static float playerFullHp;
	protected static int currentPlayer;
	protected static int currentEnemy;
	protected static String[] pSkillName = new String[4];
	protected static String[] eSkillName = new String[4];
	
	protected static float pDMG=0;
	protected static float eDMG=0;
	
	protected static float pAdebuff=0;
	protected static float pDdebuff=0;
	protected static float eAdebuff=0;
	protected static float eDdebuff=0;
	
	protected static int enemyPatternCnt=1;
	
	SkillDex[] sDex = SkillDex.getInstance();
	static Scanner battleScan = new Scanner(System.in);
	
	
	public BattleTower(){
		
	}
	public static void BattleTowerScene() {
		while(true) {
			towerLevel = battleScan.nextInt();
			if(towerLevel<0||towerLevel>30) {
				//현재설정 타워레벨 최대 30
				battlePrinter(1);
				System.out.println("> "+towerLevel+"층은 존재하지 않습니다.");
				System.out.println("> 1에서 30 사이의 정수를 입력해주세요.");
				battlePrinter(2);
				
			}else if(towerLevel>recordTowerLevel) {
				//입력값이 최고기록보다 높을 때
				battlePrinter(1);
				System.out.println("> 입력하신 층은 현재 도전하실 수 없습니다.");
				System.out.println("> 이전 층을 먼저 클리어해주세요.");
				battlePrinter(2);
			}else {
				switch(towerLevel) {
				case 0:
					Game_Display.MainScreen();
					break;
				default:
					battleManeger();
					break;
					
				}
			}
			
		}
		
		
	}//battlescene end
	public static void battlePrinter(int num) {
		switch(num) {
		case 1:
			System.out.println("◈＼／＼／＼／＼／＼／＼／＼／＼／＼／＼／＼／＼／＼／＼◈");
			System.out.println("　　　　　　　　　　대전모드：배틀타워　　　　　　　　　　");
			System.out.println("◈／＼／＼／＼／＼／＼／＼／＼／＼／＼／＼／＼／＼／＼／◈");
			System.out.println("〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓");
			break;
		case 2:
			System.out.println("〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓");
			System.out.println("○―――――――――――――――――○　○―――――――○");
			System.out.println("｜Ｎ：　Ｎ층으로　이동　　　　　　　｜　｜０：　　타이틀｜");
			System.out.println("○―――――――――――――――――○　○―――――――○");
			break;
		case 3://배틀조우
			System.out.println(towerLevel+"층의 수호자"+enemy.get(currentEnemy).name+"가 나타났다!");
			
			break;
		case 4:
			System.out.println("가라!"+player.get(currentPlayer).name);
			break;
		case 5://전투 상태화면
			
			System.out.println("〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓");
			System.out.println("							"+enemy.get(currentEnemy).name+"HP:"+enemy.get(currentEnemy).HP+"/"+enemyFullHp);
			System.out.println();
			System.err.println(player.get(currentPlayer).name+"HP : "+player.get(currentPlayer).HP+"/"+playerFullHp);
			System.out.println("무엇을 할까?");
			System.out.println("1. 싸운다 2. 포켓몬을 교체한다. 3. 포기한다.");
			break;
		case 9://적 몹 쓰러짐
			System.out.println(towerLevel+"층의 수호자"+enemy.get(currentEnemy).name+"가 쓰러졌다!");
			currentEnemy+=1;
			System.out.println(towerLevel+"층의 수호자"+enemy.get(currentEnemy).name+"가 나타났다!");
			break;
		case 10://플레이어승리
			System.out.println(towerLevel+"층의 수호자"+enemy.get(currentEnemy).name+"에게 승리했다!");
			System.out.println();//보상받는부분
			break;
		case 11://플레이어몹 사망
			System.out.println(player.get(currentPlayer).name+"가 쓰러졌다!");
			currentPlayer+=1;
			System.out.println("가라!"+player.get(currentPlayer).name);
			break;
		case 12://플레이어 패배
			System.out.println(towerLevel+"층의 수호자"+enemy.get(currentEnemy).name+"에게 패배했다!");
			System.out.println("나는 눈앞이 깜깜해졌다..");
			System.out.println("좀 더 성장해서 도전해보시길 바랍니다.");//보상받는부분
			break;
		}
	}
	public static void battleManeger() {
		//세팅
		player= new HashMap<>();
		try {
			player.put(1, (Pokemon) Pokemon_Main.user.getPokemonEach(0).clone());
		} catch (CloneNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			player.put(2, (Pokemon) Pokemon_Main.user.getPokemonEach(1).clone());
		} catch (CloneNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			player.put(3, (Pokemon) Pokemon_Main.user.getPokemonEach(2).clone());
		} catch (CloneNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		enemyGenerator();//몸생성 enemy해쉬맵 생성
		battlePrinter(3);//조우 대사
		currentEnemy=1;
		currentPlayer=1;
		enemyFullHp=enemy.get(currentEnemy).HP;
		playerFullHp=player.get(currentPlayer).HP;
		
		
		
		boolean flag = true;
		int select=0;
		String strSel;
		//선택지
		while(flag) {
			battlePrinter(5);
			while(true) {
				try {
					select  = battleScan.nextInt();
					if(select<1||select>3) {
						System.out.println("1,2,3사이의 수를 입력해주세요. ");
						continue;
					}
				}catch (NumberFormatException e) {
					// TODO: handle exception
					System.out.println("1,2,3사이의 수를 입력해주세요. ");
					continue;
				}
				break;
			}//선택지
			switch(select) {
			case 1://싸운다
			
			case 2://교체한다
			
			case 3://포기한다.
				System.out.println("정말로 포기하겠습니까? 포기하시려면 00을 입력해주세요. 다른 입력시 배틀로 돌아갑니다.");
					try {
						strSel  = battleScan.next();
						if(strSel=="00") {
							System.out.println("배틀을 종료하고 메인화면으로 돌아갑니다.");
							Game_Display.MainScreen();
						}
					}catch (NullPointerException e) {
						// TODO: handle exception
						break;
					}
				break;
			
			}
			
			
		}
		
		
	}
	
	public static void battle() {
		/*
		 *  배틀 선택지
		 *  1공격기 2공격기(비자속) 3 변화기 4 방어
		 *  키입력
		 *  스피드 계산(선후공 판단)
		 *  선공자 선 행동 계산 후 적용
		 *  후공자 행동 계산 후 적용
		 *  체력 확인
		 *  배틀 재개 혹은 종료
		 */
		System.out.println(player.get(currentPlayer).name+"은 무슨 일을 할까?");
		for(int i=0;i<4;i++) {
			pSkillName[i]=Skill.getSkillNameByIndex(player.get(currentPlayer).skillIndexNum[i]);
			eSkillName[i]=Skill.getSkillNameByIndex(enemy.get(currentEnemy).skillIndexNum[i]);
		}
		System.out.println("1."+pSkillName[0]+"2. "+pSkillName[1]+"3. "+pSkillName[2]+"4. "+pSkillName[3]);
		int select =0;
		while(true) {//스킬입력
			try {
				select  = battleScan.nextInt();
				if(select<1||select>4) {
					System.out.println("1,2,3,4사이의 수를 입력해주세요. ");
					continue;
				}
			}catch (NumberFormatException e) {
				// TODO: handle exception
				System.out.println("1,2,3사이의 수를 입력해주세요. ");
				continue;
			}
			break;
		}//선택지
		int fs=0;//0은 플레이어 1은 적
		if(player.get(currentPlayer).SPD>enemy.get(currentEnemy).SPD) {
			fs=0;
		}else if(player.get(currentPlayer).SPD<enemy.get(currentEnemy).SPD) {
			fs=1;
		}else {
			fs=(int) (Math.random())/2;
		}
		if(fs==0) {//플레이어 선턴
			switch (select) {//스킬사용
			case 1: //자속기
				pDMG=Skill.dmgCal(player.get(currentPlayer), enemy.get(currentEnemy), player.get(currentPlayer).skillIndexNum[0]);
				enemy.get(currentEnemy).HP=enemy.get(currentEnemy).HP-pDMG;
				if(enemy.get(currentEnemy).HP<=0) {//적 다운시
					if(currentEnemy==3) {
						battlePrinter(10);
					}else {
						battlePrinter(9);
					}
				}//외곽if문
				//적 행동
				break;
			case 2://비자속기
				pDMG=Skill.dmgCal(player.get(currentPlayer), enemy.get(currentEnemy), player.get(currentPlayer).skillIndexNum[1]);
				enemy.get(currentEnemy).HP=enemy.get(currentEnemy).HP-pDMG;
				if(enemy.get(currentEnemy).HP<=0) {//적 다운시
					if(currentEnemy==3) {
						battlePrinter(10);
					}else {
						battlePrinter(9);
					}
				}//외곽if문
				//적 행동
				break;
			case 3://디버프
				pAdebuff=Skill.ATKdebuffCal(enemy.get(currentEnemy),player.get(currentPlayer).skillIndexNum[2]);
				pDdebuff=Skill.DEFdebuffCal(enemy.get(currentEnemy),player.get(currentPlayer).skillIndexNum[2]);
				if(pAdebuff==0||pDdebuff!=0) {//방디벞
					enemy.get(currentEnemy).DEF=enemy.get(currentEnemy).DEF*pDdebuff;					
				}else if(pAdebuff!=0||pDdebuff==0) {//공디벞
					enemy.get(currentEnemy).DEF=enemy.get(currentEnemy).ATK*pAdebuff;
				}else {//에러체크
					System.out.println("오류남 스킬 이상함");
				}
				//적행동
				break;
			case 4:
				//방어, 적행동
			}
		}
	}//battle끝
	public static void whatEnemyDoing() {
		//적 행동패턴 
		if(enemyPatternCnt==1) {
			eAdebuff=Skill.ATKdebuffCal(player.get(currentPlayer),enemy.get(currentEnemy).skillIndexNum[2]);
			eDdebuff=Skill.DEFdebuffCal(player.get(currentPlayer),enemy.get(currentEnemy).skillIndexNum[2]);
			if(eAdebuff==0||eDdebuff!=0) {//방디벞
				player.get(currentPlayer).DEF=player.get(currentPlayer).DEF*eDdebuff;					
			}else if(pAdebuff!=0||pDdebuff==0) {//공디벞
				player.get(currentPlayer).DEF=player.get(currentPlayer).ATK*eAdebuff;
			}else {//에러체크
				System.out.println("오류남 스킬 이상함");
			}
			enemyPatternCnt++;
		}
		if(enemyPatternCnt==2) {
			eDMG=Skill.dmgCal(enemy.get(currentEnemy), player.get(currentPlayer), enemy.get(currentEnemy).skillIndexNum[0]);
			player.get(currentPlayer).HP=player.get(currentPlayer).HP-eDMG;
			if(player.get(currentPlayer).HP<=0) {//플레이어 다운시
				if(currentPlayer==3) {//패배
					battlePrinter(10);
				}else {
					battlePrinter(9);
				}
			}//외곽if문
		}
	}
	public static void enemyGenerator() {
		enemy= new HashMap<>();
		Pokemon p1;
		Pokemon p2;
		Pokemon p3;
		switch(towerLevel) {
		//노가다파트
		case 1:
			p1 = new Pokemon(22,1,5);//dex,add,lv 미니브
			p2 = new Pokemon(25,1,5);//dex,add,lv탄동
			p3 = new Pokemon(28,1,5);//dex,add,lv꼬링크
			enemy.put(1, p1);
			enemy.put(1, p2);
			enemy.put(1, p3);
			break;
		case 2:
			p1 = new Pokemon(31,2,5);//dex,add,lv 찌르꼬
			p2 = new Pokemon(37,2,5);//dex,add,lv잉어킹
			p3 = new Pokemon(10,2,5);//dex,add,lv맛보돈
			enemy.put(1, p1);
			enemy.put(1, p2);
			enemy.put(1, p3);
			break;
		}
		
		
		
	}
	
	
}
